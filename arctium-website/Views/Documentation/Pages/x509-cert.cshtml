<div class="documentation-page">
    <h1 class="title">X509 Certificate V3</h1>
    <h2 class="title">Content:</h2>

	<ul class="content-table">
		<li class="content-table__item">
            <a href="#summary" class="link">Summary</a>
        </li>
		<li class="content-table__item">
			<a class="link" href="#examples">Examples</a>
		</li>
	</ul>

    <hr />
	
	<h2 class="title" id="summary">Summary</h2>
	<p>
		JH Hash function
	</p>

	<hr />

	<h2>Summary</h2>

<p>
This document presents <bold>supported</bold> data structure presented in  
the current implementation of X509 Certificate V3 in Arctium project.
Current status of this implementation is: <bold>Partial-unsafe</bold>
</p>

<h2>Deserialization</h2>


	<div class="code-container">
		<div class="code">
    	<pre>
using Arctium.Cryptography.ASN1.Standards.X501.Types;
using Arctium.Cryptography.ASN1.Standards.X509.X509Cert;
using Arctium.Cryptography.ASN1.Standards.X509.X509Cert.Extensions;
using Arctium.Cryptography.FileFormat.PEM;
using System;
using System.IO;

namespace DEBUG_ConsoleApplicationForTests
{
    class Program
    {

        static void Main(string[] args)
        {
            // certificate deserializer
            X509CertificateDeserializer deserializer = new X509CertificateDeserializer();

            // Certificate can be decoded in following manner:

            // From Raw Bytes
            byte[] certificateBytes = File.ReadAllBytes("C:\\some_certificate.cer");
            X509Certificate certificateFromRawBytes = deserializer.FromBytes(certificateBytes);

            // From PEM file

            X509Certificate certificateFromPem = deserializer.FromPem("C:\\some_pem.crt");
            
            // Or first decode pem and the raw bytes

            PemFile pemFile = PemFile.FromFile("D:\\some_pem.crt");
            byte[] decodedPemBytes = pemFile.DecodedData;

            //X509Certificate certificateFromPemToBytes = deserializer.FromBytes(decodedPemBytes);


            // Now object is created, examples usage:
            var cert = certificateFromRawBytes;

            Console.WriteLine(cert.ValidNotAfter);
            Console.WriteLine(cert.ValidNotBefore);
            Console.WriteLine(cert.Version);

            RelativeDistinguishedName[] relativeDistinguishedNames = cert.Subject.GetAsRelativeDistinguishedNames();
            Console.WriteLine("Relative distinguished names:");
            foreach (var rdn in relativeDistinguishedNames)
            {
                foreach (var atv in rdn.AttributeTypeAndValues)
                {
                    AttributeType attributeType = atv.Type;
                    string attributeValue = atv.StringValue();
                    Console.WriteLine(" " + attributeType.ToString() + "=" + attributeValue);
                }
            }

            Console.WriteLine("======== extensions =========");

            CertificateExtension[] extensions = cert.Extensions;
            foreach (var ext in extensions)
            {
                Console.WriteLine("Extensions type: " + ext.ExtensionType.ToString());
                switch (ext.ExtensionType)
                {
                    case ExtensionType.SubjectAltName:
                        SubjectAlternativeNamesExtension altName = (SubjectAlternativeNamesExtension)ext;
                        GeneralName[] generalNames = altName.GeneralNames;
                        Console.WriteLine("General names:");
                        foreach (var gn in generalNames)
                        {
                            Console.WriteLine("  " + gn.ToString());
                        }
                        break;
                    case ExtensionType.Unknown:
                        break;
                    case ExtensionType.ExtendedKeyUsage:
                        break;
                    case ExtensionType.KeyUsage:
                        break;
                    case ExtensionType.SubjectKeyIdentifier:
                        break;
                    // and others ....
                }
            }

        }
    }
}

</pre>
		</div>
	</div>

<p>Example output</p>

<div class="code-container">
	<div class="code">
	
	<pre>
2020-08-05 11:36:04
2019-05-28 14:30:02
2
Relative distinguished names:
 Country=GB
 StateOrProvinceName=London
 Locality=London
 Organization=British Broadcasting Corporation
 CommonName=www.bbc.com
======== extensions =========
Extensions type: KeyUsage
Extensions type: AuthorityInfoAccess
Extensions type: CertificatePolicy
Extensions type: BasicConstraints
Extensions type: CRLDistributionPoints
Extensions type: SubjectAltName
General names:
  www.bbc.com
  fig.bbc.co.uk
  bbc.co.uk
  www.bbc.co.uk
  bbc.com
Extensions type: ExtendedKeyUsage
Extensions type: AuthorityKeyIdentifier
Extensions type: SubjectKeyIdentifier
Extensions type: SCTL
</pre>
	</div>
	</div>

<h2>X509Certificate structure</h2>


<table class="table">
	<thead>
		<tr>
			<td>Certificate field</td>
			<td>Type</td>
		</tr>
	</thead>
	<tbody>
		<tr><td>Version</td><td>int</td></tr>
	<tr><td>SerialNumber</td><td>byte</td></tr>
	<tr><td>RawSignatureValue</td><td>byte[]</td></tr>
	<tr><td>Issuer</td><td>X500T.Name</td></tr>
	<tr><td>ValidNotBefore</td><td>DateTime</td></tr>
	<tr><td>ValidNotAfter</td><td>DateTime</td></tr>
	<tr><td>Subject</td><td>X500T.Name</td></tr>
	<tr><td>IssuerUniqueId</td><td>byte[]</td></tr>
	<tr><td>SubjectUniqueId</td><td>byte[]</td></tr>
	<tr><td>Extensions</td><td>CertificateExtension[]</td></tr>
	<tr><td>SubjectPublicKey</td><td>SubjectPublicKeyInfo</td></tr>
	</tbody>
	
</table>



<h2>Subject Public Key info</h2>

<table class="table">
	<thead>
		<tr><th>Fields</th><th>Type</th></tr>
	</thead>
	<tbody>
		<tr>
			<td>AlgorithmType</td>
			<td>PublicKeyAlgorithm (enum)</td>
`		</tr>
	</tbody>
</table>

<table class="table">
	<thead>
		<tr><th>Methods</th><th>Comment</th></tr>
	</thead>
	<tbody>
		<tr>
			<td>GetParms(T)</td>
			<td>Returns parameters for pulic key (if exists)</td>
`		</tr>
		<tr>
			<td>GetPublicKey</td>
			<td>Returns typed public key</td>
`		</tr>
	</tbody>
</table>

<p>GetPublicKey(T) Generic method parameter **must** be used for casting 
of the inner representation of public key value. For example:</p>

<div class="code-container">
	<div class="code">
<pre>

    if(certificate.SubjectPublicKey.AlgorithmType == PublicKeyAlgorithm.RSAEncryption)
        { 
            RSAPublicKey rsa = certificate.GetPulicKey<RSAPublicKey>();
            byte[] mod = rsa.Modulus;
            byte[] publicExp = rsa.PulicExponent;
        }
</pre>
	</div>
</div>

<p>Supported casts are present below: </p>

<table>
	<thead>
		<tr>
			<th>AlgorithmType Value</th>
			<th>param of GetPublicKey(T)</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>RSAEncryption</td>
			<td>RSAPulicKey</td>
		</tr>
		<tr>
			<td>ECPublicKey</td>
			<td>byte[]</td>
		</tr>
	</tbody>
</table>

<p>For example: </p>

<div class="code-container">
	<div class="code">
		<pre>
if(cert.SubjectPublicKey.ECPublicKey)
{
    EcpkParameters ecParams = cert.GetParms<EcpkParameters>();
    switch(ecParms.ParmsType)
    {
        case EcpkParmsType.ImplicitlyCA:
                // this values is null
            break;
        case EcpkParmsType.ECParameters:
            ECParameters ecTyped = ecParams.GetParams<ECParameters>();
            break;
        case EcpkParmsType.NamedCurve:
            ObjectIdentifier oid = ecParams.GetParams<ObjectIdentifier>();
            break;
    }
}
		</pre>
	</div>
</div>

<p>Casting for parameters:</p>

<table class="table">
	<thead>
		<tr>
			<td>Type</td>
			<td>Params</td>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>ECPublicKey</td>
			<td>EcpkParameters</td>
		</tr>
	</tbody>
</table>

	<h2>
		Extensions
	</h2>

<p>All extensions not mentioned in table below are mapped to the  
special type type of extension: <strong>UnknownExtension</strong></p>

<table class="table">
	<thead>
		<tr>
			<td>Name</td>
			<td>Status</td>
			<td>Comment</td>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>Authority Info Access</td>
			<td>Partial-unsafe</td>
			<td>General names problems</td>
		</tr>
		<tr>
			<td>Certifiate Policies</td>
			<td>OK</td>
			<td></td>
		</tr>
		<tr>
			<td>Distribution Points</td>
			<td>Partial-unsafe</td>
			<td>General names problems</td>
		</tr>
		<tr>
			<td>Extended Key Usage</td>
			<td>OK</td>
			<td></td>
		</tr>
		<tr>
			<td>Authority Key Identifier</td>
			<td>OK</td>
			<td></td>
		</tr>
		<tr>
			<td>Basic Constraints Extension</td>
			<td>OK</td>
			<td></td>
		</tr>
		<tr>
			<td>Key Usage Extension</td>
			<td>OK</td>
			<td></td>
		</tr>
		<tr>
			<td>SCTL (Signed certificate timestamp list)</td>
			<td>Partial-safe</td>
			<td>Class exists (but holds raw data)</td>
		</tr>
		<tr>
			<td>Subject Alternative Name Extension</td>
			<td>Partial-unsafe</td>
			<td>General names problems</td>
		</tr>
		<tr>
			<td>Subject Key Identifier</td>
			<td>OK</td>
			<td></td>
		</tr>
		<tr>
			<td>Unknown Extension</td>
			<td>OK</td>
			<td>Special Extensions type, if extensions is not on this list, raw ExtValue bytes are present in this object</td>
		</tr>
	</tbody>
</table>
</div>